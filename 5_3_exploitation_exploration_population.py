import numpy as np
import random

target_string = "GeneticAlgorithm"
A = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
population_size = 200
K = 2 
mutation_rate = 0
crossover_probability = 1

def generate_sequence(length):
    return [A[random.randint(0, (len(A)-1))] for _ in range(length)]

def generate_population(population_size, sequence_length):
    return [generate_sequence(sequence_length) for _ in range(population_size)]

def fitness(sequence, goal):
    matches = 0
    for i in range(len(sequence)):
        if sequence[i] == goal[i]:
            matches += 1
    return matches/len(sequence)

def tournament_selection(population, fitnesses, K):
    selected = []
    for _ in range(2):
        participants_indices = np.random.choice(population_size, size=K, replace=False)
        participants_fitnesses = [fitnesses[i] for i in participants_indices]
        winner_index = participants_indices[np.argmax(participants_fitnesses)]
        selected.append(population[winner_index])
    return selected

def crossover(parent1, parent2):
    if np.random.rand() < crossover_probability:
        crossover_point = np.random.randint(1, len(parent1))
        child1 = parent1[:crossover_point] + parent2[crossover_point:]
        child2 = parent2[:crossover_point] + parent1[crossover_point:]
        return child1, child2
    else:
        return parent1, parent2

def mutate(string, mutation_rate):
    mutated_string = ''
    for char in string:
        if np.random.rand() < mutation_rate:
            mutated_string += np.random.choice([c for c in A if c != char])   
        else:
            mutated_string += char
    return mutated_string

def generate_offspring(population, fitnesses):
    offspring = []
    for _ in range(population_size // 2):
        parent1, parent2 = tournament_selection(population, fitnesses, K)
        child1, child2 = crossover(parent1, parent2)
        child1 = mutate(child1, mutation_rate)
        child2 = mutate(child2, mutation_rate)
        offspring.extend([child1, child2])
    return offspring

def string_search(target, generations):
    population = generate_population(population_size, len(target))
    best_fitness = 0

    for i in range(generations):
        fitnesses = [fitness(string, target) for string in population]
        best_index = np.argmax(fitnesses)
        best_fitness = fitnesses[best_index]
        
        if best_fitness == 1:
            return i
        
        population = generate_offspring(population, fitnesses)

    return generations

if __name__ == "__main__":
    total_generations = 0
    runs = 10
    
    for i in range(runs):
        print("Run: ", i)
        generations = string_search(target_string, 1500)
        print(generations)
        total_generations += generations

    avg_generations = total_generations / runs

    print(f"Average generations to find target: {avg_generations}")
